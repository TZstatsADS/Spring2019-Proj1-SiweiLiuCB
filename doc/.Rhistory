count(word, sort = TRUE)
hm_bigrams <- hm_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
df = read.csv('../output/processed_moments.csv')
View(df)
View(df)
df = read.csv('../output/processed_moments.csv')
str(df)
df = read.csv('../output/processed_moments.csv')
summary(df$reflection_period)
df = read.csv('../output/processed_moments.csv')
View(df)
View(df)
summary(df$predicted_category)
# Import the libraries
library(wordcloud)
library(ggplot2)
library(RColorBrewer)
library(qdap)
# Import the libraries
library(wordcloud)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(tidytext)
library(tm)
library(tidyverse)
library(DT)
# Import the libraries
library(wordcloud)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(tidytext)
library(tm)
library(tidyverse)
library(DT)
knitr::include_graphics("./Happy-Hands.jpg")
knitr::include_graphics("./Happy_moments_img.jpeg")
knitr::include_graphics("./Happy_moments_img.jpeg")
knitr::include_graphics("./figs/Happy_moments_img.jpeg")
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
dim(df1)
dim(df2)
dim(df3)
# import the three data frames used in the analysis
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
summary(df1)
str(df1)
str(df1$age)
View(df1)
View(df1)
View(df2)
View(df2)
View(df1)
View(df1)
View(df2)
View(df2)
View(df3)
View(df3)
View(df1)
View(df1)
# Merge the dataframes
df = merge(df1, df2, by='wid')
df = merge(df, df3, by = 'hmid')
View(df)
View(df)
df[complete.cases(df), ]
dim(df)
dim(df[complete.cases(df), ])
str(df$predicted_category)
levels(df$predicted_category)
levels(df$predicted_category)
mydata %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'),each = 1)) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'),each = 1)) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar() +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'paleturquoise'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRe'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'))) +
coord_flip()
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'YlOrRd'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'RdYlGn'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'RdBu'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'BrBG'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'PRGn'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'cool_war'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'cool_warm'))) +
coord_flip() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme_bw()
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme(axis.title.y=element_blank()) +
theme_bw()
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)))) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
corpus_f <- VCorpus(VectorSource(df$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
tdm.all_f<-TermDocumentMatrix(corpus_f)
tdm.tidy_f <- tidy(tdm.all_f)
tdm.overall_f <- summarise(group_by(tdm.tidy_f, term), sum(count))
wordcloud(tdm.overall_f$term, tdm.overall_f$`sum(count)`,
scale=c(4,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
ff.all = VCorpus(VectorSource(df$text))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(15,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
corpus = VCorpus(VectorSource(df$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, character(0))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(stripWhitespace)
tdm.all = TermDocumentMatrix(corpus)
corpus = VCorpus(VectorSource(df$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, character(0))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(stripWhitespace)
tdm.all = TermDocumentMatrix(corpus)
tdm.tidy = tidy(tdm.all)
tdm.overall = summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(4,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
female = filter(df,df$gender == 'f')
View(female)
View(female)
female = filter(df,df$gender == 'f')
male = filter(df, df$gender == 'm')
# Prepare for different word cloud for male and female seperately
male = filter(df, df$gender == 'm')
female = filter(df,df$gender == 'f')
corpus = VCorpus(VectorSource(male$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, character(0))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(stripWhitespace)
tdm.all = TermDocumentMatrix(corpus)
tdm.tidy = tidy(tdm.all)
tdm.overall = summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(4,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
# word cloud for female
corpus = VCorpus(VectorSource(female$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, character(0))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(stripWhitespace)
tdm.all = TermDocumentMatrix(corpus)
tdm.tidy = tidy(tdm.all)
tdm.overall = summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(4,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Reds"))
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip()
levels(df$gender)
gender_func = function(df){
if (df$gender == 'f'){df$gender = 'Female'}
else if (df$gender == 'm'){df$gender = 'Male'}
else {df$gender = 'Other'}
}
gender_func(df)
levels(df$gender)
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- "Other"
levels(df$gender)
# import the three data frames used in the analysis
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
# Merge the dataframes
df = merge(df1, df2, by='wid')
df = merge(df, df3, by = 'hmid')
dim(df)
levels(df$predicted_category)
# df$gender[df$gender == "m"] <- "Male"
# df$gender[df$gender == "f"] <- "Female"
# df$gender[df$gender == "" | df$gender == "o" ] <- "Female"
df$gender[df$gender == "m"]
# df$gender[df$gender == "m"] <- "Male"
# df$gender[df$gender == "f"] <- "Female"
# df$gender[df$gender == "" | df$gender == "o" ] <- "Female"
df$gender[df$gender == "m"] = 'Male'
# import the three data frames used in the analysis
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
# Merge the dataframes
df = merge(df1, df2, by='wid')
df = merge(df, df3, by = 'hmid')
# df$gender[df$gender == "m"] <- "Male"
# df$gender[df$gender == "f"] <- "Female"
# df$gender[df$gender == "" | df$gender == "o" ] <- "Female"
str(df)
df$gender <- as.factor(df$gender)
df$gender[df$gender == "m"] <- "Male"
# df$gender[df$gender == "f"] <- "Female"
# df$gender[df$gender == "" | df$gender == "o" ] <- "Female"
# import the three data frames used in the analysis
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
# Merge the dataframes
df = merge(df1, df2, by='wid')
df = merge(df, df3, by = 'hmid')
levels(df$gender)
df$gender <- as.character(df$gender)
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- "Other"
# Turn gender column from factor to character
df$gender <- as.character(df$gender)
# Rename the gender column
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- "Other"
# Turn gender column from charactor back to factor
df$gender <- as.factor(df$gender)
levels(df$gender)
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip()
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip()
levels(df$gender)
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip() +
theme(axis.title.y=element_blank())
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)), fill = gender)) +
geom_bar(fill = rep(brewer.pal(7,'Spectral'))) +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
#
# ggplot(df, aes(predicted_category, fill = gender)) +
#   geom_bar() +
#   ggtitle("Predicted Category Distribution Bar Graph") +
#   coord_flip() +
#   theme_bw() +
#   theme(axis.title.y=element_blank())
df %>%
filter(!is.na(predicted_category)) %>%
ggplot(., aes(x = reorder(predicted_category, predicted_category, function(x) length(x)), fill = gender)) +
geom_bar(fill = fill = gender) +
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
ggplot(df, aes(x = reorder(predicted_category, predicted_category, function(x) length(x))))) +
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Predicted Category Distribution Bar Graph") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Bar Graph with Different Gender") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Gender Difference in Seven Categories") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
str(df)
t.test(df$valency ~ df$gender)
# Turn gender column from factor to character
df$gender <- as.character(df$gender)
# Rename the gender column
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- NA
# Turn gender column from charactor back to factor
df$gender <- as.factor(df$gender)
levels(df$gender)
# Turn gender column from factor to character
df$gender <- as.character(df$gender)
# Rename the gender column
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- NA
# Turn gender column from charactor back to factor
df$gender <- as.factor(df$gender)
levels(df$gender)
table(df$gender)
# import the three data frames used in the analysis
df1 = read.csv('../output/processed_moments.csv')
df2 = read.csv('../data/demographic.csv')
df3 = read.csv('../data/vad.csv')
# Merge the dataframes
df = merge(df1, df2, by='wid')
df = merge(df, df3, by = 'hmid')
# Turn gender column from factor to character
df$gender <- as.character(df$gender)
# Rename the gender column
df$gender[df$gender == "m"] <- "Male"
df$gender[df$gender == "f"] <- "Female"
df$gender[df$gender == "" | df$gender == "o" ] <- NA
# Turn gender column from charactor back to factor
df$gender <- as.factor(df$gender)
table(df$gender)
ggplot(df, aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Gender Difference in Seven Categories") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
ggplot(data=subset(df,!is.na(df$gender)), aes(predicted_category, fill = gender)) +
geom_bar() +
ggtitle("Gender Difference in Seven Categories") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
t.test(df$valency ~ df$gender)
t.test(df$arousal ~ df$gender)
t.test(df$dominance ~ df$gender)
table(df$gender, df$valency)
t.test(df$arousal ~ df$gender)
t.test(df$valency ~ df$gender)
t.test(df$arousal ~ df$gender)
t.test(df$dominance ~ df$gender)
levels(df$marital)
ggplot(data=subset(df,!is.na(df$marital), aes(x = df$marital))) +
geom_bar(aes(fill=factor(predicted_category)), position="fill")
ggplot(data=subset(df,!is.na(df$marital)), aes(predicted_category, fill = marital)) +
geom_bar() +
ggtitle("Gender Difference in Seven Categories") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
ggplot(data=subset(df,!is.na(df$marital)), aes(predicted_category, fill = marital)) +
geom_bar() +
ggtitle("Marital Status Difference in Seven Categories") +
coord_flip() +
theme_bw() +
theme(axis.title.y=element_blank())
